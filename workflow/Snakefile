configfile: "./config/config.yaml"
include: "./rules/fastq_qc.smk"
include: "./rules/qualimap_qc.smk"
import os

# rule all:
#     input:
#         [f"results/QC/FastQC/{sample}_1_fastqc.html" for sample in config["samples"]],
#         [f"results/QC/FastQC/{sample}_1_fastqc.zip" for sample in config["samples"]],
#         [f"results/QC/FastQC/{sample}_2_fastqc.html" for sample in config["samples"]],
#         [f"results/QC/FastQC/{sample}_2_fastqc.zip" for sample in config["samples"]],
#         [f"results/QC/FastQC/{sample}_1_fastqc.html" for sample in config["samples"]],
#         [f"results/QC/FastQC/{sample}_1_fastqc.zip" for sample in config["samples"]],
#         [f"results/QC/FastQC/{sample}_2_fastqc.html" for sample in config["samples"]],
#         [f"results/QC/FastQC/{sample}_2_fastqc.zip" for sample in config["samples"]],
#         [f"fastq/trimmed/{sample}_trimmed_1.fastq.gz" for sample in config["samples"]],
#         [f"fastq/trimmed/{sample}_trimmed_2.fastq.gz" for sample in config["samples"]],
#         [f"results/QC/FastQC/{sample}_trimmed_1_fastqc.html" for sample in config["samples"]],
#         "results/feature_counts.txt",
#         "results/plots/pca_plot.png",
#         [f"results/QC/flagstats/{sample}.flagstats.txt" for sample in config["samples"]],
#         [f"results/QC/idxstats/{sample}.idxstats.txt" for sample in config["samples"]]

rule all:
    input:
        "info_file.txt"
        # [f"fastq/trimmed/{sample}_trimmed_1.fastq.gz" for sample in config["samples"]],
        # [f"fastq/trimmed/{sample}_trimmed_2.fastq.gz" for sample in config["samples"]],
        # [f"results/QC/FastQC/{sample}_trimmed_1_fastqc.html" for sample in config["samples"]],
        # [f"results/QC/flagstats/{sample}.flagstats.txt" for sample in config["samples"]],
        # [f"results/QC/idxstats/{sample}.idxstats.txt" for sample in config["samples"]],
        # [f"results/QC/qualimap/{sample}_BAMQC/" for sample in config["samples"]],
        # [f"results/count_data/{sample}_countfile.compcount.txt" for sample in config["samples"]]

rule hisat_index_genome:
    input:
        config["reference"]
    output:
        "ref/ref.1.ht2",
        "ref/ref.2.ht2",
        "ref/ref.3.ht2",
        "ref/ref.4.ht2",
        "ref/ref.5.ht2",
        "ref/ref.6.ht2",
        "ref/ref.7.ht2",
        "ref/ref.8.ht2"
    conda:
        "envs/hisat.yaml"
    threads: 8
    log:
        "results/logs/hisat2/index_reference.log"
    shell:
        "hisat2-build -p {threads} {input} ref/ref 2> {log}"
    

rule hisat2_align:
    input:
        fastq_files = lambda wildcards: config["samples"][wildcards.sample][reads],
        reference = "ref/ref.1.ht2"
    output:
        temp("temp/SAM/{sample}.sam"),
        "results/QC/hisat2/{sample}.hisat2.met",
        "results/QC/hisat2/{sample}.hisat2.summary"
    conda:
        "envs/hisat.yaml"
    log:
        "results/logs/hisat2/align_{sample}.log"
    shell:
        "hisat2 "
            "-x ref/ref "
            "-1 {input.fastq_files[0]} "
            "-2 {input.fastq_files[1]} "
            "-S results/BAM/{wildcards.sample}.sam "
            "--summary-file results/QC/hisat2/{wildcards.sample}.hisat2.summary "
            "--new-summary "
            "--met-file results/QC/hisat2/{wildcards.sample}.hisat2.met "
            "2> {log}"


rule samtools_sam2bam:
    input:
        "temp/BAM/{sample}.sam"
    output:
        temp("results/BAM/{sample}.bam")
    conda:
        "envs/mapping.yaml"
    threads: 4
    shell:
        "samtools view -b --threads {threads} {input} > results/BAM/{sample}.bam"

rule samtools_sort_bam:
    input:
        "results/BAM/{sample}.bam"
    output:
        "results/BAM/{sample}.sorted.bam"
    conda:
        "envs/mapping.yaml"
    threads: 4
    shell:
        "samtools sort --threads {threads} {input} -o results/BAM/{sample}.sorted.bam"


rule samtools_index_bam:
    input:
        "results/BAM/{sample}.sorted.bam"
    output:
        "results/BAM/{sample}.sorted.bam.bai"
    conda:
        "envs/mapping.yaml"
    threads: 4
    shell:
        "samtools index --threads {threads} {input}"


rule samtools_flagstats:
    input:
        "results/BAM/{sample}.sorted.bam"
    output:
        "results/QC/flagstats/{sample}.flagstats.txt"
    conda:
        "envs/mapping.yaml"
    threads: 4
    shell:
        "samtools flagstats --threads {threads} {input} "
        "> results/QC/flagstats/{wildcards.sample}.flagstats.txt"
    

rule samtools_idxstats:
    input:
        "results/BAM/{sample}.sorted.bam",
        "results/BAM/{sample}.sorted.bam.bai"
    output:
        "results/QC/idxstats/{sample}.idxstats.txt"
    conda:
        "envs/mapping.yaml"
    threads: 4
    shell:
        "samtools idxstats --threads {threads} {input[0]} "
        "> results/QC/idxstats/{wildcards.sample}.idxstats.txt"


rule subread_featurecounts:
    input:
        bam = [f"results/BAM/{sample}.sorted.bam" for sample in config["samples"]],
        bai = [f"results/BAM/{sample}.sorted.bam.bai" for sample in config["samples"]],
        gtf = config["annotation_file"]
    output:
        "results/count_data/feature_counts.txt"
    conda:
        "envs/subread.yaml"
    threads: 4
    log:
        "results/logs/featurecounts/feature_counts.log"
    params:
        file_type = config["annotation_file_type"]
    shell:
        "featureCounts "
            "-F '{params.file_type}' "
            "-p --countReadPairs "
            "-T {threads} "
            "-t exon "
            "-g gene_id "
            "-a {input.gtf} "
            "-o {output}} "
            "{input.bam} "
            "2> {log}"

rule plot_pca:
    input:
        count_table = "results/feature_counts.txt",
        metadata = config["metadata"]
    output:
        "results/plots/pca_plot.png"
    conda:
        "envs/r_plots.yaml"
    script:
        "scripts/pca.R"
    