configfile: "./config/config.yaml"

rule all:
    input:
        [f"results/QC/FastQC/{sample}_1_fastqc.html" for sample in config["samples"]],
        [f"results/QC/FastQC/{sample}_1_fastqc.zip" for sample in config["samples"]],
        [f"results/QC/FastQC/{sample}_2_fastqc.html" for sample in config["samples"]],
        [f"results/QC/FastQC/{sample}_2_fastqc.zip" for sample in config["samples"]],
        "results/feature_counts.txt",
        "results/plots/pca_plot.png"



rule fastqc:
    input:
        lambda wildcards: config["samples"][wildcards.sample]
    output:
        "results/QC/FastQC/{sample}_1_fastqc.html",
        "results/QC/FastQC/{sample}_1_fastqc.zip",
        "results/QC/FastQC/{sample}_2_fastqc.html",
        "results/QC/FastQC/{sample}_2_fastqc.zip"
    conda:
        "envs/qc.yaml"
    threads: 2
    log:
        "results/logs/FastQC/{sample}.log"
    shell:
        "fastqc {input} --outdir results/QC/FastQC/ --threads {threads} 2> {log}"


rule hisat_index_genome:
    input:
        config["reference"]
    output:
        "ref/ref.1.ht2",
        "ref/ref.2.ht2",
        "ref/ref.3.ht2",
        "ref/ref.4.ht2",
        "ref/ref.5.ht2",
        "ref/ref.6.ht2",
        "ref/ref.7.ht2",
        "ref/ref.8.ht2"
    conda:
        "envs/hisat.yaml"
    threads: 8
    log:
        "results/logs/hisat2/index_reference.log"
    shell:
        "hisat2-build -p {threads} {input} ref/ref 2> {log}"
    

rule hisat2_align:
    input:
        fastq_files = lambda wildcards: config["samples"][wildcards.sample],
        reference = "ref/ref.1.ht2"
    output:
        temp("results/BAM/{sample}.sam")
    conda:
        "envs/hisat.yaml"
    log:
        "results/logs/hisat2/align_{sample}.log"
    shell:
        "hisat2 "
            "-x ref/ref "
            "-1 {input.fastq_files[0]} "
            "-2 {input.fastq_files[1]} "
            "-S results/BAM/{wildcards.sample}.sam "
            "2> {log}"

# rule bowtie2_index:
#     input:
#         config["reference"]
#     output:
#         "ref/ref.1.bt2",
#         "ref/ref.2.bt2",
#         "ref/ref.3.bt2",
#         "ref/ref.4.bt2",
#         "ref/ref.rev.1.bt2",
#         "ref/ref.rev.2.bt2",
#     conda:
#         "envs/bowtie2.yaml"
#     log:
#         "results/logs/Bowtie2/index_reference.log"
#     shell:
#         "bowtie2-build {input} ref/ref 2> {log}"


# rule bowtie2_align:
#     input:
#         fastq_files = lambda wildcards: config["samples"][wildcards.sample],
#         reference = "ref/ref.1.bt2"
#     output:
#         temp("results/BAM/{sample}.sam")
#     conda:
#         "envs/bowtie2.yaml"
#     log:
#         "results/logs/Bowtie2/align_{sample}.log"
#     shell:
#         "bowtie2 "
#             "-x ref/ref "
#             "-1 {input.fastq_files[0]} "
#             "-2 {input.fastq_files[1]} "
#             "> results/BAM/{wildcards.sample}.sam "
#             "2> {log}"


rule samtools_sam2bam:
    input:
        "results/BAM/{sample}.sam"
    output:
        temp("results/BAM/{sample}.bam")
    conda:
        "envs/samtools.yaml"
    shell:
        "samtools view -bS {input} > results/BAM/{wildcards.sample}.bam"


rule samtools_index_bam:
    input:
        "results/BAM/{sample}.bam"
    output:
        "results/BAM/{sample}.sorted.bam",
        "results/BAM/{sample}.sorted.bam.bai"
    conda:
        "envs/samtools.yaml"
    shell:
        "samtools sort {input} > results/BAM/{wildcards.sample}.sorted.bam; "
        "samtools index results/BAM/{wildcards.sample}.sorted.bam"


rule subread_featurecounts:
    input:
        bam = [f"results/BAM/{sample}.sorted.bam" for sample in config["samples"]],
        bai = [f"results/BAM/{sample}.sorted.bam.bai" for sample in config["samples"]],
        gtf = config["annotation_file"]
    output:
        "results/feature_counts.txt"
    conda:
        "envs/subread.yaml"
    threads: 4
    log:
        "results/logs/featurecounts/feature_counts.log"
    params:
        file_type = config["annotation_file_type"]
    shell:
        "featureCounts "
            "-F '{params.file_type}' "
            "-p --countReadPairs "
            "-T {threads} "
            "-t exon "
            "-g gene_id "
            "-a {input.gtf} "
            "-o results/feature_counts.txt "
            "{input.bam} "
            "2> {log}"

rule plot_pca:
    input:
        count_table = "results/feature_counts.txt",
        metadata = config["metadata"]
    output:
        "results/plots/pca_plot.png"
    conda:
        "envs/r_plots.yaml"
    script:
        "scripts/pca.R"
    